rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserId() {
      return request.auth.uid;
    }

    function hasCustomClaims() {
      return request.auth.token.family_id != null && request.auth.token.user_type != null;
    }

    function getFamilyId() {
      return request.auth.token.family_id;
    }

    function getUserType() {
      return request.auth.token.user_type;
    }

    function isParent() {
      return request.auth.token.user_type == 'parent';
    }

    function isStudent() {
      return request.auth.token.user_type == 'student';
    }

    function hasOnlyAllowedFields(allowedFields) {
      return request.resource.data.keys().hasOnly(allowedFields);
    }

    // GRADUATED SECURITY: Start with more permissive rules, then tighten

    // User collection - SECURE with registration support
    match /users/{userId} {
      // Read: Own data always, family members with custom claims
      allow read: if isAuthenticated() && (
        userId == getUserId() ||
        (hasCustomClaims() && getFamilyId() != null)
      );

      // Create: Own user only (registration safe)
      allow create: if isAuthenticated() && userId == getUserId();

      // Update: Own data with some field restrictions
      allow update: if isAuthenticated() && userId == getUserId() && (
        // Registration fields
        hasOnlyAllowedFields(['email_verified', 'updated_at']) ||
        hasOnlyAllowedFields(['full_name', 'email', 'user_type', 'family_id', 'updated_at']) ||
        hasOnlyAllowedFields(['push_tokens', 'updated_at']) ||
        hasOnlyAllowedFields(['family_id', 'updated_at']) ||
        // Profile updates (with custom claims)
        (hasCustomClaims() && hasOnlyAllowedFields(['name', 'email', 'phone', 'paypal_email', 'updated_at']))
      );
    }

    // Families - Server-side creation, restricted client access
    match /families/{familyId} {
      // Read: Family members only (but more permissive during registration)
      allow read: if isAuthenticated() && (
        (hasCustomClaims() && getFamilyId() == familyId) ||
        // Registration support - allow reading families you're in
        (!hasCustomClaims() && (
          resource.data.parentIds.hasAny([getUserId()]) ||
          resource.data.studentIds.hasAny([getUserId()])
        ))
      );

      // Create: Server-side only (client should use Cloud Functions)
      allow create: if false; // Force use of createFamilyServerSide

      // Update: Very restricted (mostly server-side)
      allow update: if isAuthenticated() && hasCustomClaims() && isParent() && getFamilyId() == familyId;
    }

    // PERMISSIVE: Messages - Keep working during testing
    match /messages/{messageId} {
      // Read: Family members (relaxed for testing)
      allow read: if isAuthenticated() && (
        !hasCustomClaims() || // Allow during registration
        (hasCustomClaims() && getFamilyId() == resource.data.family_id)
      );

      // Create: Authenticated users (relaxed for testing)
      allow create: if isAuthenticated() && (
        !hasCustomClaims() || // Allow during registration
        (hasCustomClaims() && getFamilyId() == request.resource.data.family_id && getUserId() == request.resource.data.from_user_id)
      );

      // Update: Own messages
      allow update: if isAuthenticated() && getUserId() == resource.data.from_user_id;
    }

    // PERMISSIVE: Wellness entries - Keep working during testing
    match /wellness_entries/{entryId} {
      // Read: Own entries or family members
      allow read: if isAuthenticated() && (
        getUserId() == resource.data.user_id ||
        (hasCustomClaims() && getFamilyId() == resource.data.family_id)
      );

      // Create: Own entries (relaxed)
      allow create: if isAuthenticated() && getUserId() == request.resource.data.user_id;

      // Update: Own entries
      allow update: if isAuthenticated() && getUserId() == resource.data.user_id;
    }

    // SECURE: Push tokens - Registration safe
    match /push_tokens/{tokenId} {
      // Read: Own tokens only
      allow read: if isAuthenticated() && getUserId() == resource.data.user_id;

      // Write: Own tokens only
      allow write: if isAuthenticated() && getUserId() == request.resource.data.user_id;
    }

    // SECURE: Profiles - Basic security
    match /profiles/{userId} {
      // Read: Own profile or family members
      allow read: if isAuthenticated() && (
        userId == getUserId() ||
        (hasCustomClaims() && getFamilyId() != null)
      );

      // Write: Own profile only
      allow write: if isAuthenticated() && userId == getUserId();
    }

    // SECURE: Verification tokens - Password reset support
    match /verification_tokens/{tokenId} {
      // Read: Needed for password reset (unauthenticated)
      allow read: if true;

      // Create: Needed for registration and password reset
      allow create: if true;

      // Update: Server-only
      allow update: if false;
    }

    // PERMISSIVE: Payments - Keep working during testing
    match /payments/{paymentId} {
      // Read: Family members (relaxed)
      allow read: if isAuthenticated() && (
        !hasCustomClaims() || // Allow during registration
        (hasCustomClaims() && (
          getFamilyId() == resource.data.family_id ||
          getUserId() == resource.data.parent_id ||
          getUserId() == resource.data.student_id
        ))
      );

      // Create: Parents (relaxed)
      allow create: if isAuthenticated() && (
        !hasCustomClaims() || // Allow during registration
        (hasCustomClaims() && isParent())
      );

      // Update: Own payments
      allow update: if isAuthenticated() && (
        getUserId() == resource.data.parent_id ||
        getUserId() == resource.data.student_id
      );
    }

    // SECURE: User progress - Server-only writes
    match /user_progress/{userId} {
      // Read: Own progress or family members
      allow read: if isAuthenticated() && (
        userId == getUserId() ||
        (hasCustomClaims() && getFamilyId() != null)
      );

      // Write: Server-only (prevents XP manipulation)
      allow write: if false;
    }

    // PERMISSIVE: Support requests - Keep working
    match /support_requests/{requestId} {
      // Read: Family members (relaxed)
      allow read: if isAuthenticated();

      // Create: Students (relaxed)
      allow create: if isAuthenticated();

      // Update: Family members (relaxed)
      allow update: if isAuthenticated();
    }

    // PERMISSIVE: Family join requests - Registration support
    match /family_join_requests/{requestId} {
      // Read: Anyone authenticated
      allow read: if isAuthenticated();

      // Write: Registration support
      allow write: if isAuthenticated();
    }

    // PERMISSIVE: Additional collections - Basic security
    match /rewards/{rewardId} {
      allow read, write: if isAuthenticated() && (
        resource == null ||
        request.resource.data.user_id == getUserId() ||
        resource.data.user_id == getUserId()
      );
    }

    match /item_requests/{requestId} {
      allow read, write: if isAuthenticated();
    }

    match /monthly_spend/{spendId} {
      allow read, write: if isAuthenticated();
    }

    match /subscriptions/{subscriptionId} {
      allow read, write: if isAuthenticated() && (
        resource == null ||
        request.resource.data.user_id == getUserId() ||
        resource.data.user_id == getUserId()
      );
    }

    // SECURE: Default deny for unknown collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}