rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserId() {
      return request.auth.uid;
    }

    function hasCustomClaims() {
      return request.auth.token.family_id != null && request.auth.token.user_type != null;
    }

    function getFamilyId() {
      return request.auth.token.family_id;
    }

    function getUserType() {
      return request.auth.token.user_type;
    }

    function isParent() {
      return request.auth.token.user_type == 'parent';
    }

    function isStudent() {
      return request.auth.token.user_type == 'student';
    }

    function hasOnlyAllowedFields(allowedFields) {
      return request.resource.data.keys().hasAll(resource.data.keys()) &&
             request.resource.data.keys().hasOnly(allowedFields);
    }

    // SECURE: User collection rules - REGISTRATION SAFE
    match /users/{userId} {
      // Read: Own data always, family members if custom claims exist
      allow read: if isAuthenticated() && (
        userId == getUserId() ||
        (hasCustomClaims() && getFamilyId() != null)
      );

      // Create: REGISTRATION SAFE - Own user only
      allow create: if isAuthenticated() && userId == getUserId();

      // Update: REGISTRATION SAFE - Own data with field validation
      allow update: if isAuthenticated() && userId == getUserId() && (
        // During registration - allow basic profile setup
        hasOnlyAllowedFields(['email_verified', 'updated_at']) ||
        hasOnlyAllowedFields(['full_name', 'email', 'user_type', 'family_id', 'updated_at']) ||
        hasOnlyAllowedFields(['push_tokens', 'updated_at']) ||
        hasOnlyAllowedFields(['paypal_email', 'phone', 'updated_at']) ||
        // Established users
        (hasCustomClaims() && hasOnlyAllowedFields(['name', 'email', 'phone', 'paypal_email', 'updated_at']))
      );
    }

    // SECURE: Family collection rules - REGISTRATION SAFE
    match /families/{familyId} {
      // Read: REGISTRATION SAFE - Family members (with or without custom claims)
      allow read: if isAuthenticated() && (
        (hasCustomClaims() && getFamilyId() == familyId) ||
        // During registration - allow reading family you're creating/joining
        (!hasCustomClaims() && (
          resource.data.parentIds.hasAny([getUserId()]) ||
          resource.data.studentIds.hasAny([getUserId()])
        ))
      );

      // Create: REGISTRATION SAFE - New family creation
      allow create: if isAuthenticated() && (
        // During registration - parent creates family with themselves as parent
        (!hasCustomClaims() && request.resource.data.parentIds.hasAll([getUserId()])) ||
        // Established parent creates additional families
        (hasCustomClaims() && isParent())
      );

      // Update: REGISTRATION SAFE - Family management
      allow update: if isAuthenticated() && (
        // During student registration - joining family
        (!hasCustomClaims() &&
         resource.data.parentIds.hasAny([getUserId()]) == false && // Not already a parent
         request.resource.data.studentIds.hasAny([getUserId()]) && // Adding self as student
         request.resource.data.parentIds == resource.data.parentIds // Not changing parents
        ) ||
        // Established parents managing their family
        (hasCustomClaims() && isParent() && getFamilyId() == familyId)
      );
    }

    // SECURE: Messages collection rules
    match /messages/{messageId} {
      // Read: Family members only
      allow read: if isAuthenticated() && hasCustomClaims() &&
        getFamilyId() == resource.data.family_id;

      // Create: Family members only, own messages
      allow create: if isAuthenticated() && hasCustomClaims() &&
        getFamilyId() == request.resource.data.family_id &&
        getUserId() == request.resource.data.from_user_id;

      // Update: Own messages only
      allow update: if isAuthenticated() &&
        getUserId() == resource.data.from_user_id;
    }

    // SECURE: Wellness entries collection rules
    match /wellness_entries/{entryId} {
      // Read: Own entries always, family entries if custom claims exist
      allow read: if isAuthenticated() && (
        getUserId() == resource.data.user_id ||
        (hasCustomClaims() && getFamilyId() == resource.data.family_id)
      );

      // Create: Own entries only
      allow create: if isAuthenticated() &&
        getUserId() == request.resource.data.user_id;

      // Update: Own entries only
      allow update: if isAuthenticated() &&
        getUserId() == resource.data.user_id;
    }

    // SECURE: Push tokens collection rules - REGISTRATION SAFE
    match /push_tokens/{tokenId} {
      // Read: Own tokens only
      allow read: if isAuthenticated() && getUserId() == resource.data.user_id;

      // Create/Update: REGISTRATION SAFE - Own tokens only
      allow write: if isAuthenticated() && getUserId() == request.resource.data.user_id;
    }

    // SECURE: Profiles collection rules - REGISTRATION SAFE
    match /profiles/{userId} {
      // Read: Own profile or family members if custom claims exist
      allow read: if isAuthenticated() && (
        userId == getUserId() ||
        (hasCustomClaims() && getFamilyId() != null)
      );

      // Create: REGISTRATION SAFE - Own profile only
      allow create: if isAuthenticated() && userId == getUserId();

      // Update: Own profile only
      allow update: if isAuthenticated() && userId == getUserId();
    }

    // SECURE: Verification tokens collection rules - REGISTRATION SAFE
    match /verification_tokens/{tokenId} {
      // Read: REGISTRATION SAFE - Needed for password reset (unauthenticated access)
      allow read: if true;

      // Create: REGISTRATION SAFE - Needed for registration and password reset
      allow create: if true;

      // Update: Server-only (Cloud Functions handle token usage)
      allow update: if false;
    }

    // SECURE: Payment collection rules
    match /payments/{paymentId} {
      // Read: Family members only
      allow read: if isAuthenticated() && hasCustomClaims() && (
        getFamilyId() == resource.data.family_id ||
        getUserId() == resource.data.parent_id ||
        getUserId() == resource.data.student_id
      );

      // Create: Parents only
      allow create: if isAuthenticated() && hasCustomClaims() &&
        isParent() && getUserId() == request.resource.data.parent_id;

      // Update: Own payments only
      allow update: if isAuthenticated() && (
        getUserId() == resource.data.parent_id ||
        getUserId() == resource.data.student_id
      );
    }

    // SECURE: Support requests collection rules
    match /support_requests/{requestId} {
      // Read: Family members only
      allow read: if isAuthenticated() && hasCustomClaims() &&
        getFamilyId() == resource.data.family_id;

      // Create: Students can create requests
      allow create: if isAuthenticated() && hasCustomClaims() &&
        isStudent() && getUserId() == request.resource.data.student_id;

      // Update: Family members can update
      allow update: if isAuthenticated() && hasCustomClaims() &&
        getFamilyId() == resource.data.family_id;
    }

    // SECURE: Family join requests rules - REGISTRATION SAFE
    match /family_join_requests/{requestId} {
      // Read: REGISTRATION SAFE - Anyone authenticated can see requests
      allow read: if isAuthenticated();

      // Create: REGISTRATION SAFE - Students can create before having custom claims
      allow create: if isAuthenticated() &&
        getUserId() == request.resource.data.student_id;

      // Update: REGISTRATION SAFE - Family members can approve
      allow update: if isAuthenticated();
    }

    // SECURE: User progress collection rules
    match /user_progress/{userId} {
      // Read: Own progress or family members
      allow read: if isAuthenticated() && (
        userId == getUserId() ||
        (hasCustomClaims() && getFamilyId() != null)
      );

      // Write: SERVER ONLY (prevents XP manipulation)
      allow write: if false;
    }

    // SECURE: Additional collections with basic access patterns
    match /rewards/{rewardId} {
      // Read/Write: Own rewards only
      allow read, write: if isAuthenticated() && (
        resource == null ||
        request.resource.data.user_id == getUserId() ||
        resource.data.user_id == getUserId()
      );
    }

    match /item_requests/{requestId} {
      // Read: Own requests or family members
      allow read: if isAuthenticated() && (
        resource.data.student_id == getUserId() ||
        resource.data.parent_id == getUserId() ||
        (hasCustomClaims() && getFamilyId() != null)
      );

      // Create: Own requests only
      allow create: if isAuthenticated() &&
        getUserId() == request.resource.data.student_id;

      // Update: Own requests or related parents
      allow update: if isAuthenticated() && (
        resource.data.student_id == getUserId() ||
        resource.data.parent_id == getUserId()
      );
    }

    match /monthly_spend/{spendId} {
      // Read/Write: Parents only for their own data
      allow read, write: if isAuthenticated() && hasCustomClaims() &&
        isParent() && (
          resource == null ||
          request.resource.data.parent_id == getUserId() ||
          resource.data.parent_id == getUserId()
        );
    }

    match /subscriptions/{subscriptionId} {
      // Read/Write: Own subscriptions only
      allow read, write: if isAuthenticated() && (
        resource == null ||
        request.resource.data.user_id == getUserId() ||
        resource.data.user_id == getUserId()
      );
    }

    // SECURE: Default deny for any unlisted collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}