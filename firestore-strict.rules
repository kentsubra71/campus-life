rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserId() {
      return request.auth.uid;
    }

    function hasCustomClaims() {
      return request.auth.token.family_id != null && request.auth.token.user_type != null;
    }

    function getFamilyId() {
      return request.auth.token.family_id;
    }

    function getUserType() {
      return request.auth.token.user_type;
    }

    function isParent() {
      return request.auth.token.user_type == 'parent';
    }

    function isStudent() {
      return request.auth.token.user_type == 'student';
    }

    // STRICT: Users collection - only established users with custom claims
    match /users/{userId} {
      allow read: if isAuthenticated() && hasCustomClaims() && (
        userId == getUserId() ||
        getFamilyId() != null
      );

      allow create: if false; // SERVER-ONLY via Cloud Functions

      allow update: if isAuthenticated() && hasCustomClaims() && userId == getUserId();
    }

    // STRICT: Families collection - only established users
    match /families/{familyId} {
      allow read: if isAuthenticated() && hasCustomClaims() && getFamilyId() == familyId;

      allow create: if false; // SERVER-ONLY via createFamilyServerSide

      allow update: if isAuthenticated() && hasCustomClaims() && isParent() && getFamilyId() == familyId;
    }

    // STRICT: Messages collection - family members only
    match /messages/{messageId} {
      allow read: if isAuthenticated() && hasCustomClaims() &&
        getFamilyId() == resource.data.family_id;

      allow create: if isAuthenticated() && hasCustomClaims() &&
        getFamilyId() == request.resource.data.family_id &&
        getUserId() == request.resource.data.from_user_id;

      allow update: if isAuthenticated() && getUserId() == resource.data.from_user_id;
    }

    // STRICT: Wellness entries - own entries or family with custom claims
    match /wellness_entries/{entryId} {
      allow read: if isAuthenticated() && (
        getUserId() == resource.data.user_id ||
        (hasCustomClaims() && getFamilyId() == resource.data.family_id)
      );

      allow create: if isAuthenticated() && getUserId() == request.resource.data.user_id;

      allow update: if isAuthenticated() && getUserId() == resource.data.user_id;
    }

    // STRICT: Push tokens - own tokens only
    match /push_tokens/{tokenId} {
      allow read, write: if isAuthenticated() && getUserId() == request.resource.data.user_id;
    }

    // STRICT: Profiles collection - family members only
    match /profiles/{userId} {
      allow read: if isAuthenticated() && (
        userId == getUserId() ||
        (hasCustomClaims() && getFamilyId() != null)
      );

      allow create: if false; // SERVER-ONLY during registration

      allow update: if isAuthenticated() && userId == getUserId();
    }

    // STRICT: Verification tokens - unauthenticated access for password reset only
    match /verification_tokens/{tokenId} {
      allow read: if true; // Needed for password reset
      allow create: if true; // Needed for password reset
      allow update: if false; // SERVER-ONLY
    }

    // STRICT: Payments - family members only
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && hasCustomClaims() && (
        getFamilyId() == resource.data.family_id ||
        getUserId() == resource.data.parent_id ||
        getUserId() == resource.data.student_id
      );

      allow create: if isAuthenticated() && hasCustomClaims() &&
        isParent() && getUserId() == request.resource.data.parent_id;

      allow update: if isAuthenticated() && (
        getUserId() == resource.data.parent_id ||
        getUserId() == resource.data.student_id
      );
    }

    // STRICT: Support requests - family members only
    match /support_requests/{requestId} {
      allow read: if isAuthenticated() && hasCustomClaims() &&
        getFamilyId() == resource.data.family_id;

      allow create: if isAuthenticated() && hasCustomClaims() &&
        isStudent() && getUserId() == request.resource.data.student_id;

      allow update: if isAuthenticated() && hasCustomClaims() &&
        getFamilyId() == resource.data.family_id;
    }

    // STRICT: User progress - SERVER-ONLY writes, family read
    match /user_progress/{userId} {
      allow read: if isAuthenticated() && (
        userId == getUserId() ||
        (hasCustomClaims() && getFamilyId() != null)
      );

      allow write: if false; // SERVER-ONLY to prevent XP manipulation
    }

    // STRICT: Additional collections with family-based access
    match /rewards/{rewardId} {
      allow read, write: if isAuthenticated() && hasCustomClaims() && (
        resource == null ||
        request.resource.data.user_id == getUserId() ||
        resource.data.user_id == getUserId()
      );
    }

    match /item_requests/{requestId} {
      allow read: if isAuthenticated() && hasCustomClaims() && (
        resource.data.student_id == getUserId() ||
        resource.data.parent_id == getUserId() ||
        getFamilyId() != null
      );

      allow create: if isAuthenticated() && hasCustomClaims() &&
        getUserId() == request.resource.data.student_id;

      allow update: if isAuthenticated() && hasCustomClaims() && (
        resource.data.student_id == getUserId() ||
        resource.data.parent_id == getUserId()
      );
    }

    match /monthly_spend/{spendId} {
      allow read, write: if isAuthenticated() && hasCustomClaims() &&
        isParent() && (
          resource == null ||
          request.resource.data.parent_id == getUserId() ||
          resource.data.parent_id == getUserId()
        );
    }

    match /subscriptions/{subscriptionId} {
      allow read, write: if isAuthenticated() && hasCustomClaims() && (
        resource == null ||
        request.resource.data.user_id == getUserId() ||
        resource.data.user_id == getUserId()
      );
    }

    // Collections that Cloud Functions need access to (SERVER-ONLY)
    match /notification_history/{notificationId} {
      allow read: if isAuthenticated() && hasCustomClaims() &&
        getUserId() == resource.data.userId;
      allow write: if false; // SERVER-ONLY
    }

    match /xp_transactions/{transactionId} {
      allow read: if isAuthenticated() && hasCustomClaims() &&
        getUserId() == resource.data.user_id;
      allow write: if false; // SERVER-ONLY
    }

    // STRICT: Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}