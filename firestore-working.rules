rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    // FIXED: Fallback to user document if custom claims not available
    function getFamilyId() {
      return request.auth.token.family_id != null 
        ? request.auth.token.family_id
        : get(/databases/$(database)/documents/users/$(getUserId())).data.family_id;
    }
    
    function getUserType() {
      return request.auth.token.user_type != null
        ? request.auth.token.user_type  
        : get(/databases/$(database)/documents/users/$(getUserId())).data.user_type;
    }
    
    function isParent() {
      return getUserType() == 'parent';
    }
    
    function isStudent() {
      return getUserType() == 'student';
    }
    
    function isEmailVerified() {
      // Allow if custom claims show verified, OR if user has basic auth (temporary)
      return request.auth.token.email_verified == true || request.auth.token.email_verified == null;
    }
    
    function isSameFamily(targetUserId) {
      let targetDoc = get(/databases/$(database)/documents/users/$(targetUserId));
      return targetDoc != null && targetDoc.data.family_id == getFamilyId();
    }
    
    // Validation helpers
    function hasOnlyAllowedFields(allowedFields) {
      return request.resource.data.keys().hasOnly(allowedFields);
    }
    
    // User collection rules
    match /users/{userId} {
      // Read: Own data or family members
      allow read: if isAuthenticated() && (
        userId == getUserId() ||
        (getFamilyId() != null && isSameFamily(userId))
      );
      
      // Create: Own user only
      allow create: if isAuthenticated() && userId == getUserId();
      
      // Update: Own data only, with field restrictions
      allow update: if isAuthenticated() && userId == getUserId() && (
        // Allow email verification updates
        hasOnlyAllowedFields(['email_verified', 'updated_at']) ||
        // Allow profile updates
        hasOnlyAllowedFields(['name', 'email', 'phone', 'paypal_email', 'updated_at', 'push_tokens']) ||
        // Allow push token updates
        hasOnlyAllowedFields(['push_tokens', 'updated_at'])
      );
    }
    
    // Family collection rules  
    match /families/{familyId} {
      // Read: Family members only
      allow read: if isAuthenticated() && getFamilyId() == familyId;
      
      // Create: Parents only
      allow create: if isAuthenticated() && isParent() && getFamilyId() == familyId;
      
      // Update: Parents only
      allow update: if isAuthenticated() && isParent() && getFamilyId() == familyId;
    }
    
    // Messages collection rules
    match /messages/{messageId} {
      // Read: Family members only
      allow read: if isAuthenticated() && 
        getFamilyId() != null &&
        getFamilyId() == resource.data.family_id;
      
      // Create: Family members only
      allow create: if isAuthenticated() && 
        getFamilyId() != null &&
        getFamilyId() == request.resource.data.family_id &&
        getUserId() == request.resource.data.sender_id;
      
      // Update: Own messages only
      allow update: if isAuthenticated() && 
        getUserId() == resource.data.sender_id;
    }
    
    // Support requests collection rules
    match /support_requests/{requestId} {
      // Read: Family members only
      allow read: if isAuthenticated() && 
        getFamilyId() != null &&
        getFamilyId() == resource.data.family_id;
      
      // Create: Students can create, must be for their family
      allow create: if isAuthenticated() && 
        getFamilyId() != null &&
        getFamilyId() == request.resource.data.family_id &&
        getUserId() == request.resource.data.student_id;
      
      // Update: Family members can update
      allow update: if isAuthenticated() && 
        getFamilyId() != null &&
        getFamilyId() == resource.data.family_id;
    }
    
    // Wellness entries collection rules
    match /wellness_entries/{entryId} {
      // Read: Own entries or family members (parents can see student wellness)
      allow read: if isAuthenticated() && (
        getUserId() == resource.data.user_id ||
        (getFamilyId() != null && getFamilyId() == resource.data.family_id)
      );
      
      // Create: Own entries only
      allow create: if isAuthenticated() && 
        getUserId() == request.resource.data.user_id &&
        getFamilyId() == request.resource.data.family_id;
      
      // Update: Own entries only
      allow update: if isAuthenticated() && 
        getUserId() == resource.data.user_id;
    }
    
    // XP/Progress collection rules - SECURED
    match /user_progress/{userId} {
      // Read: Own progress only (prevents XP manipulation)
      allow read: if isAuthenticated() && userId == getUserId();
      
      // Create/Update: SERVER ONLY (prevents client XP manipulation)
      // Only Cloud Functions with admin privileges can write
      allow write: if false; // All writes blocked - must use Cloud Functions
    }
    
    // Payment collection rules
    match /payments/{paymentId} {
      // Read: Family members only
      allow read: if isAuthenticated() && 
        getFamilyId() != null &&
        getFamilyId() == resource.data.family_id;
      
      // Create: Parents only, for their family
      allow create: if isAuthenticated() && 
        isParent() &&
        getFamilyId() != null &&
        getFamilyId() == request.resource.data.family_id &&
        getUserId() == request.resource.data.parent_id;
      
      // Update: SERVER ONLY for status changes
      allow update: if false; // Payments updated by Cloud Functions only
    }
    
    // Family join requests rules
    match /family_join_requests/{requestId} {
      // Read: Family parents can see requests for their family
      allow read: if isAuthenticated() && 
        isParent() &&
        getFamilyId() != null &&
        getFamilyId() == resource.data.family_id;
      
      // Create: Students can create requests
      allow create: if isAuthenticated() && 
        isStudent() &&
        getUserId() == request.resource.data.student_id;
      
      // Update/Delete: Parents can approve/deny
      allow write: if isAuthenticated() && 
        isParent() &&
        getFamilyId() != null &&
        getFamilyId() == resource.data.family_id;
    }
    
    // Push tokens collection rules
    match /push_tokens/{tokenId} {
      // Read: Own tokens only
      allow read: if isAuthenticated() && tokenId == getUserId();
      
      // Create/Update: Own tokens only
      allow write: if isAuthenticated() && tokenId == getUserId();
    }
  }
}