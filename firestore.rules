rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions - NO DOCUMENT READS
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    // FIXED: Only use custom claims - no fallback document reads
    function getFamilyId() {
      return request.auth.token.family_id;
    }
    
    function getUserType() {
      return request.auth.token.user_type;
    }
    
    function isParent() {
      return getUserType() == 'parent';
    }
    
    function isStudent() {
      return getUserType() == 'student';
    }
    
    function hasCustomClaims() {
      return request.auth.token.family_id != null && request.auth.token.user_type != null;
    }
    
    // Validation helpers
    function hasOnlyAllowedFields(allowedFields) {
      return request.resource.data.keys().hasOnly(allowedFields);
    }
    
    // User collection rules - Allow basic access for users without custom claims yet
    match /users/{userId} {
      // Read: Own data always, family members if custom claims exist
      allow read: if isAuthenticated() && (
        userId == getUserId() ||
        (hasCustomClaims() && getFamilyId() != null)
      );
      
      // Create: Own user only
      allow create: if isAuthenticated() && userId == getUserId();
      
      // Update: Own data only, with field restrictions
      allow update: if isAuthenticated() && userId == getUserId() && (
        hasOnlyAllowedFields(['email_verified', 'updated_at']) ||
        hasOnlyAllowedFields(['name', 'email', 'phone', 'paypal_email', 'updated_at', 'push_tokens', 'family_id', 'user_type']) ||
        hasOnlyAllowedFields(['push_tokens', 'updated_at'])
      );
    }
    
    // Family collection rules - Require custom claims
    match /families/{familyId} {
      // Read: Family members only (must have custom claims)
      allow read: if isAuthenticated() && hasCustomClaims() && getFamilyId() == familyId;
      
      // Create: Parents only (must have custom claims)
      allow create: if isAuthenticated() && hasCustomClaims() && isParent() && getFamilyId() == familyId;
      
      // Update: Parents only (must have custom claims)
      allow update: if isAuthenticated() && hasCustomClaims() && isParent() && getFamilyId() == familyId;
    }
    
    // Messages collection rules - Require custom claims
    match /messages/{messageId} {
      // Read: Family members only (temporarily relaxed)
      allow read: if isAuthenticated() && hasCustomClaims();
      
      // Create: Family members only
      allow create: if isAuthenticated() && 
        hasCustomClaims() &&
        getFamilyId() == request.resource.data.family_id &&
        getUserId() == request.resource.data.sender_id;
      
      // Update: Own messages only
      allow update: if isAuthenticated() && 
        getUserId() == resource.data.sender_id;
    }
    
    // Support requests collection rules - Require custom claims
    match /support_requests/{requestId} {
      // Read: Family members only (temporarily relaxed)
      allow read: if isAuthenticated() && hasCustomClaims();
      
      // Create: Students can create (temporarily relaxed)
      allow create: if isAuthenticated() && hasCustomClaims() && isStudent();
      
      // Update: Family members can update (temporarily relaxed)
      allow update: if isAuthenticated() && hasCustomClaims();
    }
    
    // Wellness entries collection rules - Allow without custom claims for basic functionality
    match /wellness_entries/{entryId} {
      // Read: Own entries always, family entries if custom claims exist
      allow read: if isAuthenticated() && (
        getUserId() == resource.data.user_id ||
        (hasCustomClaims() && getFamilyId() == resource.data.family_id)
      );
      
      // Create: Own entries only
      allow create: if isAuthenticated() && 
        getUserId() == request.resource.data.user_id;
      
      // Update: Own entries only
      allow update: if isAuthenticated() && 
        getUserId() == resource.data.user_id;
    }
    
    // XP/Progress collection rules - SECURED (Server-only writes)
    match /user_progress/{userId} {
      // Read: Own progress only
      allow read: if isAuthenticated() && userId == getUserId();
      
      // Write: SERVER ONLY (prevents client XP manipulation)
      allow write: if false; // Must use Cloud Functions with admin privileges
    }
    
    // Payment collection rules - Require custom claims for security
    match /payments/{paymentId} {
      // Read: Family members only (temporarily relaxed)
      allow read: if isAuthenticated() && hasCustomClaims();
      
      // Create: Parents only (temporarily relaxed)
      allow create: if isAuthenticated() && hasCustomClaims() && isParent();
      
      // Update: Allow for canceling payments (temporarily relaxed)
      allow update: if isAuthenticated() && hasCustomClaims();
    }
    
    // Family join requests rules - Allow basic functionality without custom claims
    match /family_join_requests/{requestId} {
      // Read: Anyone authenticated can see requests (for approval flow)
      allow read: if isAuthenticated();
      
      // Create: Students can create requests (before they have family custom claims)
      allow create: if isAuthenticated() && 
        getUserId() == request.resource.data.student_id;
      
      // Update/Delete: Anyone can modify (approval flow needs flexibility)
      allow write: if isAuthenticated();
    }
    
    // Push tokens collection rules - Allow without custom claims (temporarily relaxed)
    match /push_tokens/{tokenId} {
      // Read: Own tokens only (relaxed)
      allow read: if isAuthenticated();
      
      // Create/Update: Own tokens only (relaxed)
      allow write: if isAuthenticated();
    }
    
    // Profiles collection rules - Allow without custom claims
    match /profiles/{userId} {
      // Read: Own profile or family members if custom claims exist
      allow read: if isAuthenticated() && (
        userId == getUserId() ||
        (hasCustomClaims() && getFamilyId() != null)
      );
      
      // Create: Own profile only
      allow create: if isAuthenticated() && userId == getUserId();
      
      // Update: Own profile only
      allow update: if isAuthenticated() && userId == getUserId();
    }
    
    // Verification tokens collection rules - Allow for password reset flow
    match /verification_tokens/{tokenId} {
      // Read: Anyone can read their own tokens (for password reset verification)
      allow read: if isAuthenticated();
      
      // Create: Anyone can create verification tokens (for password reset requests)
      allow create: if isAuthenticated();
      
      // Update: Server-only (Cloud Functions handle token usage)
      allow update: if false; // Must use Cloud Functions with admin privileges
    }
    
    // Add catch-all for other collections (temporarily for debugging)
    match /{document=**} {
      allow read, write: if isAuthenticated() && hasCustomClaims();
    }
  }
}