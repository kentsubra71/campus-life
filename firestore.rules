rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserId() {
      return request.auth.uid;
    }

    function hasCustomClaims() {
      return request.auth.token.family_id != null && request.auth.token.user_type != null;
    }

    function getFamilyId() {
      return request.auth.token.family_id;
    }

    function getUserType() {
      return request.auth.token.user_type;
    }

    function isParent() {
      return request.auth.token.user_type == 'parent';
    }

    function isStudent() {
      return request.auth.token.user_type == 'student';
    }

    // SECURE: Users collection - registration safe with custom claims support
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        // Own user document always (during registration or after)
        userId == getUserId() ||
        // Family members with full custom claims
        (hasCustomClaims() && getFamilyId() != null)
      );

      allow create: if false; // SERVER-ONLY via Cloud Functions

      allow update: if isAuthenticated() && userId == getUserId() && (
        // During registration - user has initialized claim (regardless of family claims)
        request.auth.token.initialized != null ||
        // After registration - user has full custom claims
        hasCustomClaims()
      );
    }

    // STRICT: Families collection - only established users
    match /families/{familyId} {
      allow read: if isAuthenticated() && hasCustomClaims() && getFamilyId() == familyId;

      allow create: if false; // SERVER-ONLY via createFamilyServerSide

      allow update: if isAuthenticated() && hasCustomClaims() && isParent() && getFamilyId() == familyId;
    }

    // SECURE: Messages collection - family members with graceful claims handling
    match /messages/{messageId} {
      // Read: Own messages always, or family messages if you have claims
      allow read: if isAuthenticated() && (
        getUserId() == resource.data.from_user_id ||
        getUserId() == resource.data.to_user_id ||
        (hasCustomClaims() && getFamilyId() == resource.data.family_id)
      );

      // Create: Must be your own message with valid family_id
      allow create: if isAuthenticated() &&
        getUserId() == request.resource.data.from_user_id &&
        request.resource.data.family_id is string &&
        request.resource.data.to_user_id is string;

      // Update: Only message sender can update
      allow update: if isAuthenticated() && getUserId() == resource.data.from_user_id;
    }

    // SECURE: Wellness entries - own entries or family access (no family_id stored in entries)
    match /wellness_entries/{entryId} {
      // Read: Own entries always, or family access with custom claims
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.user_id ||
        hasCustomClaims()
      );

      // Create: Must be your own entry with valid user_id
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.user_id;

      // Update: Own entries only
      allow update: if isAuthenticated() &&
        request.auth.uid == resource.data.user_id;
    }

    // STRICT: Push tokens - own tokens only (field is 'userId' not 'user_id')
    match /push_tokens/{tokenId} {
      allow read: if isAuthenticated() && getUserId() == resource.data.userId;
      allow write: if isAuthenticated() && getUserId() == request.resource.data.userId;
    }

    // SECURE: Profiles collection - registration safe
    match /profiles/{userId} {
      allow read: if isAuthenticated() && (
        userId == getUserId() ||
        (hasCustomClaims() && getFamilyId() != null)
      );

      allow create: if isAuthenticated() && userId == getUserId() &&
        request.auth.token.initialized != null;

      allow update: if isAuthenticated() && userId == getUserId() &&
        request.auth.token.initialized != null;
    }

    // STRICT: Verification tokens - unauthenticated access for password reset only
    match /verification_tokens/{tokenId} {
      allow read: if true; // Needed for password reset
      allow create: if true; // Needed for password reset
      allow update: if false; // SERVER-ONLY
    }

    // SECURE: Payments - strict participant access only
    match /payments/{paymentId} {
      // Read: Only direct payment participants (parent or student involved)
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.parent_id ||
        request.auth.uid == resource.data.student_id
      );

      // Create: Only parents creating payments with their own ID
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.parent_id &&
        request.resource.data.student_id is string &&
        request.resource.data.intent_cents is number &&
        request.resource.data.intent_cents > 0;

      // Update: Only direct payment participants
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.parent_id ||
        request.auth.uid == resource.data.student_id
      );
    }

    // SECURE: Support requests - own requests always, family with claims
    match /support_requests/{requestId} {
      // Read: Own requests always, or family requests if you have claims
      allow read: if isAuthenticated() && (
        getUserId() == resource.data.from_user_id ||
        (hasCustomClaims() && getFamilyId() == resource.data.family_id)
      );

      // Create: Must be your own request with valid family_id
      allow create: if isAuthenticated() &&
        getUserId() == request.resource.data.from_user_id &&
        request.resource.data.family_id is string;

      // Update: Own requests or family members with claims
      allow update: if isAuthenticated() && (
        getUserId() == resource.data.from_user_id ||
        (hasCustomClaims() && getFamilyId() == resource.data.family_id)
      );
    }

    // STRICT: User progress - SERVER-ONLY writes, family read
    match /user_progress/{userId} {
      allow read: if isAuthenticated() && (
        userId == getUserId() ||
        (hasCustomClaims() && getFamilyId() != null)
      );

      allow write: if false; // SERVER-ONLY to prevent XP manipulation
    }

    // SECURE: Rewards - own rewards or family access
    match /rewards/{rewardId} {
      // Read: Own rewards always, or family access with custom claims
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.user_id ||
        hasCustomClaims()
      );

      // Create: Must be your own reward with valid user_id
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.user_id &&
        request.resource.data.points is number;

      // Update: Own rewards only
      allow update: if isAuthenticated() &&
        request.auth.uid == resource.data.user_id;
    }

    match /item_requests/{requestId} {
      // Read: Own requests or family with claims
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.student_id ||
        request.auth.uid == resource.data.parent_id ||
        hasCustomClaims()
      );

      // Create: Students creating item requests
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.student_id;

      // Update: Request participants only
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.student_id ||
        request.auth.uid == resource.data.parent_id
      );
    }

    match /monthly_spend/{spendId} {
      // Read/Write: Own spending data only (parents managing their spending)
      allow read, write: if isAuthenticated() && (
        resource == null ||
        request.auth.uid == request.resource.data.parent_id ||
        request.auth.uid == resource.data.parent_id
      );
    }

    match /subscriptions/{subscriptionId} {
      // Read/Write: Own subscriptions only
      allow read, write: if isAuthenticated() && (
        resource == null ||
        request.auth.uid == request.resource.data.user_id ||
        request.auth.uid == resource.data.user_id
      );
    }

    // Collections that Cloud Functions need access to (SERVER-ONLY)
    match /notification_history/{notificationId} {
      allow read: if isAuthenticated() && hasCustomClaims() &&
        getUserId() == resource.data.userId;
      allow write: if false; // SERVER-ONLY
    }

    match /xp_transactions/{transactionId} {
      allow read: if isAuthenticated() && hasCustomClaims() &&
        getUserId() == resource.data.user_id;
      allow write: if false; // SERVER-ONLY
    }

    // STRICT: Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}